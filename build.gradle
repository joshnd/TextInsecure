import groovyx.net.http.HTTPBuilder
import static groovyx.net.http.ContentType.JSON
import static groovyx.net.http.Method.GET
import static groovyx.net.http.Method.POST
import org.apache.http.entity.mime.MultipartEntity
import org.apache.http.entity.mime.content.FileBody

buildscript {
    repositories {
        maven {
            url "https://repo1.maven.org/maven2"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
           url "https://raw.githubusercontent.com/Tubebaum/maven-repo/master/"
        }   
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:1.2.3'
        classpath files('libs/gradle-witness.jar')
        classpath "org._10ne.gradle:rest-gradle-plugin:0.4.0"
        classpath 'com.nimbledroid:gradle-profiler:1+'
    }
}

//plugins {
//  id "com.nimbledroid.profiler" version "1.0.3"
//}


apply plugin: 'com.android.application'
apply plugin: 'witness'
apply plugin: 'com.nimbledroid.profiler'


// config for NimbleDroid Gradle plugin
nimbledroid {
    apiKey = System.env.NIMBLE_KEY
    variant "release"
    appData{
        username "xyz"
        password "123"
    } 
   server "https://staging.nimbledroid.com"
}

task apps << {
    def http = new HTTPBuilder('https://staging.nimbledroid.com')
    http.auth.basic('8b89fc47ba7ba0f6d26d8610a22979c6', 'nimbledroid')
    http.request(GET) { req ->
        uri.path = '/api/v1/apps'
        response.success = { resp, reader ->
            println reader
        }
    }
}

task upload << {
    def http = new HTTPBuilder('https://staging.nimbledroid.com')
    http.auth.basic('8b89fc47ba7ba0f6d26d8610a22979c6', 'nimbledroid')
    http.request(POST, JSON) { req ->
        uri.path = '/api/v1/apks'
        requestContentType = 'multipart/form-data'
        MultipartEntity entity = new MultipartEntity()
        entity.addPart("apk", new FileBody(new File("${project.rootDir}/$apk")))
        req.entity = entity
        response.success = { resp, reader ->
            println reader
            file("${project.rootDir}/nimbledroid.properties").write(reader.profile_url)
            //latest_apk = reader.profile_url
        }
    }
}

task profile << {
    if (!file("${project.rootDir}/nimbledroid.properties").exists()) {
        upload.execute()
    }
    def done = false
    def http = new HTTPBuilder('https://staging.nimbledroid.com')
    http.auth.basic('8b89fc47ba7ba0f6d26d8610a22979c6', 'nimbledroid')
    def latest_apk = new String(file("${project.rootDir}/nimbledroid.properties").readBytes())
    while(!done) {
        http.request(GET) { req ->
            uri.path = "/api/v1$latest_apk"
            response.success = { resp, reader ->
                switch(reader.status) {
                    case ["successful", "Profiled"]:
                        println reader
                        def num_new_issues = reader.scenarios[0].num_new_issues
                        switch(num_new_issues) {
                            case 0:
                                println "Passed, no new issues"
                                break
                            default:
                                println "Failed, $num_new_issues new issues"
                                break
                        }
                        done = true
                        break
                    default:
                        println reader
                        break
                }
            }
        }
        sleep(30000)
    }
}

repositories {
    maven {
        url "https://repo1.maven.org/maven2/"
    }
    maven {
        url "https://raw.github.com/whispersystems/maven/master/preferencefragment/releases/"
    }
    maven {
        url "https://raw.github.com/whispersystems/maven/master/smil/releases/"
    }
    maven {
        url "https://raw.github.com/whispersystems/maven/master/shortcutbadger/releases/"
    }
    maven { // textdrawable
        url 'https://dl.bintray.com/amulyakhare/maven'
    }
    maven { // cwac-camera
        url 'https://repo.commonsware.com.s3.amazonaws.com'
    }
    maven {
      url 'https://dl.bintray.com/drummer-aidan/maven'
    }
    jcenter()
    mavenLocal()
}

dependencies {
    compile 'me.leolin:ShortcutBadger:1.1.0-WS1'
    compile 'se.emilsjolander:stickylistheaders:2.7.0'
    compile 'com.google.android.gms:play-services-base:6.5.87'
    compile 'com.jpardogo.materialtabstrip:library:1.0.9'
    compile 'org.w3c:smil:1.0.0'
    compile 'org.apache.httpcomponents:httpclient-android:4.3.5'
    compile 'com.github.chrisbanes.photoview:library:1.2.3'
    compile 'com.github.bumptech.glide:glide:3.6.1'
    compile 'com.makeramen:roundedimageview:2.1.0'
    compile 'com.pnikosis:materialish-progress:1.5'
    compile 'de.greenrobot:eventbus:2.4.0'
    compile ('com.afollestad:material-dialogs:0.7.9.1') {
        exclude module: 'appcompat-v7'
        exclude module: 'recyclerview-v7'
        exclude module: 'support-annotations'
    }

    compile 'pl.tajchert:waitingdots:0.1.0'
    compile 'com.soundcloud.android:android-crop:0.9.10@aar'
    compile 'com.android.support:appcompat-v7:22.1.1'
    compile 'com.android.support:recyclerview-v7:21.0.3'
    compile 'com.melnykov:floatingactionbutton:1.3.0'
    compile 'com.google.zxing:android-integration:3.1.0'
    compile ('com.android.support:support-v4-preferencefragment:1.0.0@aar'){
        exclude module: 'support-v4'
    }
    compile ('com.android.support:gridlayout-v7:22.2.0') {
        exclude module: 'support-v4'
    }

    compile 'com.squareup.dagger:dagger:1.2.2'
    compile ("com.doomonafireball.betterpickers:library:1.5.3") {
        exclude group: 'com.android.support', module: 'support-v4'
    }
    compile 'com.madgag.spongycastle:prov:1.51.0.0'
    compile 'com.commonsware.cwac:camera:0.6.12'
    provided 'com.squareup.dagger:dagger-compiler:1.2.2'

    compile 'org.whispersystems:jobmanager:1.0.2'
    compile 'org.whispersystems:libpastelog:1.0.6'
    compile 'com.amulyakhare:com.amulyakhare.textdrawable:1.0.1'
    compile 'org.whispersystems:textsecure-android:1.8.1'
    compile 'com.h6ah4i.android.compat:mulsellistprefcompat:1.0.0'
    compile 'me.relex:circleindicator:1.0.0@aar'

    testCompile 'junit:junit:4.12'
    testCompile 'org.assertj:assertj-core:1.7.1'
    testCompile 'org.mockito:mockito-core:1.9.5'
    testCompile 'org.powermock:powermock-api-mockito:1.6.1'
    testCompile 'org.powermock:powermock-module-junit4:1.6.1'
    testCompile 'org.powermock:powermock-module-junit4-rule:1.6.1'
    testCompile 'org.powermock:powermock-classloading-xstream:1.6.1'

    androidTestCompile 'com.google.dexmaker:dexmaker:1.2'
    androidTestCompile 'com.google.dexmaker:dexmaker-mockito:1.2'
    androidTestCompile ('org.assertj:assertj-core:1.7.1') {
        exclude group: 'org.hamcrest', module: 'hamcrest-core'
    }
    androidTestCompile ('com.squareup.assertj:assertj-android:1.0.0') {
        exclude group: 'org.hamcrest',        module: 'hamcrest-core'
        exclude group: 'com.android.support', module: 'support-annotations'
    }
}

android {
    compileSdkVersion 22
    buildToolsVersion '22.0.1'

    dexOptions {
        javaMaxHeapSize "4g"
    }

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 22

        buildConfigField "long", "BUILD_TIMESTAMP", System.currentTimeMillis() + "L"
        buildConfigField "String", "TEXTSECURE_URL", "\"https://textsecure-service.whispersystems.org\""
        buildConfigField "String", "USER_AGENT", "\"OWA\""
        buildConfigField "String", "REDPHONE_MASTER_URL", "\"https://redphone-master.whispersystems.org\""
        buildConfigField "String", "REDPHONE_RELAY_HOST", "\"relay.whispersystems.org\""
        buildConfigField "String", "REDPHONE_PREFIX_NAME", "\".whispersystems.org\""
        buildConfigField "boolean", "DEV_BUILD", "false"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'LICENSE'
        exclude 'NOTICE'
        exclude 'asm-license.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }

    signingConfigs {
        release
    }

    buildTypes {
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                          'proguard-google-play-services.pro',
                          'proguard-dagger.pro',
                          'proguard-jackson.pro',
                          'proguard-sqlite.pro',
                          'proguard-appcompat-v7.pro',
                          'proguard-square-okhttp.pro',
                          'proguard-square-okio.pro',
                          'proguard-spongycastle.pro',
                          'proguard-rounded-image-view.pro',
                          'proguard-glide.pro',
                          'proguard-shortcutbadger.pro',
                          'proguard-retrofit.pro',
                          'proguard.cfg'
        }
        release {
            minifyEnabled true
            proguardFiles = buildTypes.debug.proguardFiles
            signingConfig signingConfigs.release
        }
        dev.initWith(buildTypes.debug)
        dev {
            buildConfigField "boolean", "DEV_BUILD", "true"
        }
    }

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
            jniLibs.srcDirs = ['libs']
        }
        androidTest {
            java.srcDirs = ['test/androidTest/java']
        }
        test {
            java.srcDirs = ['test/unitTest/java']
        }
    }

     lintOptions {
        abortOnError false
    }
}

tasks.whenTaskAdded { task ->
    if (task.name.equals("lint")) {
        task.enabled = false
    }
}

def Properties props = new Properties()
def propFile = new File('signing.properties')

if (propFile.canRead()){
    props.load(new FileInputStream(propFile))

    if (props !=null &&
        props.containsKey('STORE_FILE')     &&
        props.containsKey('STORE_PASSWORD') &&
        props.containsKey('KEY_ALIAS')      &&
        props.containsKey('KEY_PASSWORD'))
    {
        android.signingConfigs.release.storeFile = file(props['STORE_FILE'])
        android.signingConfigs.release.storePassword = props['STORE_PASSWORD']
        android.signingConfigs.release.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.release.keyPassword = props['KEY_PASSWORD']
    } else {
        println 'signing.properties found but some entries are missing'
        android.buildTypes.release.signingConfig = null
    }
}else {
    println 'signing.properties not found'
    android.buildTypes.release.signingConfig = null
}
